from pathlib import Path

from code2md.consts import LANGUAGE_MAP
from code2md.interfaces import FileWriter


class MarkdownFileWriter(FileWriter):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown."""

    @classmethod
    def _is_binary_file(cls, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –±–∏–Ω–∞—Ä–Ω—ã–º.

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

        Returns:
            True, –µ—Å–ª–∏ —Ñ–∞–π–ª –±–∏–Ω–∞—Ä–Ω—ã–π, –∏–Ω–∞—á–µ False
        """
        try:
            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 1024 –±–∞–π—Ç–∞ —Ñ–∞–π–ª–∞
            with open(file_path, 'rb') as f:
                chunk = f.read(1024)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–ª–µ–≤—ã—Ö –±–∞–π—Ç–æ–≤ (–ø—Ä–∏–∑–Ω–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
            if b'\x00' in chunk:
                return True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç UTF-8
            chunk.decode('utf-8')
            return False
        except UnicodeDecodeError:
            return True
        except Exception:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–º
            return False

    @classmethod
    def _get_language_for_file(cls, file_path: Path) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ (–¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ Dockerfile)
        file_name = file_path.name
        if file_name in LANGUAGE_MAP:
            return LANGUAGE_MAP[file_name]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        extension = file_path.suffix.lower()
        if extension in LANGUAGE_MAP:
            return LANGUAGE_MAP[extension]

        # –î–ª—è —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        return ''

    @classmethod
    def write(
        self,
        output_file: Path,
        project_tree: list[str],
        files_to_include: list[Path],
        start_path: Path,
    ) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –≤ Markdown —Ñ–∞–π–ª.

        Args:
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            project_tree: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–µ—Ä–µ–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞
            files_to_include: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
            start_path: –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        """
        with output_file.open('w', encoding='utf-8') as f:
            # –ß–∞—Å—Ç—å 1: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
            f.write(f'# üå≥ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: {start_path.name}\n\n')
            f.write('```\n')
            f.write('\n'.join(project_tree))
            f.write('\n```\n\n')
            f.write('---\n\n')

            # –ß–∞—Å—Ç—å 2: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
            f.write('# üìú –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤\n\n')

            for file_path in files_to_include:
                relative_path = file_path.relative_to(start_path)
                language = self._get_language_for_file(file_path)

                f.write(f'## üìÑ –§–∞–π–ª: `{relative_path}`\n')

                # –ï—Å–ª–∏ —Ñ–∞–π–ª –±–∏–Ω–∞—Ä–Ω—ã–π, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ —á–∏—Ç–∞—Ç—å
                if self._is_binary_file(file_path):
                    f.write('```text\n')
                    f.write('[–ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è]\n')
                    f.write('```\n\n')
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞, –µ—Å–ª–∏ —è–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                if language:
                    f.write(f'```{language}\n')
                else:
                    f.write('```\n')

                try:
                    content = file_path.read_text(encoding='utf-8')
                    # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
                    f.write(content.rstrip())
                except UnicodeDecodeError:
                    f.write('[–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ-UTF-8 —Å–∏–º–≤–æ–ª—ã - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è]')
                except Exception as e:
                    f.write(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e!s}')
                f.write('\n```\n\n')
