import argparse
from pathlib import Path

from code2md.consts import (
    FRONTEND_DEFAULT_EXCLUDED_DIRS,
    FRONTEND_DEFAULT_EXCLUDED_EXTENSIONS,
    FRONTEND_DEFAULT_EXCLUDED_FILES,
    GENERAL_EXCLUDED_DIRS,
    GENERAL_EXCLUDED_FILES,
    PYTHON_DEFAULT_EXCLUDED_DIRS,
    PYTHON_DEFAULT_EXCLUDED_EXTENSIONS,
    PYTHON_DEFAULT_EXCLUDED_FILES,
)
from code2md.file_collector import DefaultFileCollector
from code2md.file_writer import MarkdownFileWriter


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É—Ç–∏–ª–∏—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(
        description='–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω Markdown-—Ñ–∞–π–ª.',
        formatter_class=argparse.RawTextHelpFormatter
    )

    # --- –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã ---
    parser.add_argument(
        'project_path', nargs='?', default='.',
        help='–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è).'
    )
    parser.add_argument(
        '-o', '--output-dir',
        help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞).'
    )
    parser.add_argument(
        '-v', '--verbose', action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–±–æ—Ç—ã.'
    )

    # --- –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π ---
    parser.add_argument(
        '-d', '--exclude-dirs',
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: "dir1,dir2").'
    )
    parser.add_argument(
        '-f', '--exclude-files',
        help='–§–∞–π–ª—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: "file1.txt,file2.json").'
    )
    parser.add_argument(
        '-e', '--exclude-extensions',
        help='–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: ".log,.tmp").'
    )

    # --- –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
    parser.add_argument(
        '--no-exclude-dotfiles', action='store_false', dest='exclude_dotfiles',
        help='–í–∫–ª—é—á–∞–µ—Ç –≤ –æ—Ç—á–µ—Ç —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ç–æ—á–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–∫–ª—é—á–µ–Ω—ã).'
    )
    parser.add_argument(
        '--add-python-defaults', action='store_true',
        help='–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Python-–ø—Ä–æ–µ–∫—Ç–æ–≤.'
    )
    parser.add_argument(
        '--add-frontend-defaults', action='store_true',
        help='–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Frontend-–ø—Ä–æ–µ–∫—Ç–æ–≤.'
    )
    parser.set_defaults(exclude_dotfiles=True)

    args = parser.parse_args()

    start_path = Path(args.project_path).resolve()

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ---
    excluded_dirs = set(GENERAL_EXCLUDED_DIRS)
    excluded_files = set(GENERAL_EXCLUDED_FILES)
    excluded_extensions = set()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–±–æ—Ä—ã, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ñ–ª–∞–≥–∏
    if args.add_python_defaults:
        excluded_dirs.update(PYTHON_DEFAULT_EXCLUDED_DIRS)
        excluded_files.update(PYTHON_DEFAULT_EXCLUDED_FILES)
        excluded_extensions.update(PYTHON_DEFAULT_EXCLUDED_EXTENSIONS)

    if args.add_frontend_defaults:
        excluded_dirs.update(FRONTEND_DEFAULT_EXCLUDED_DIRS)
        excluded_files.update(FRONTEND_DEFAULT_EXCLUDED_FILES)
        excluded_extensions.update(FRONTEND_DEFAULT_EXCLUDED_EXTENSIONS)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if args.exclude_dirs:
        excluded_dirs.update(d.strip() for d in args.exclude_dirs.split(','))
    if args.exclude_files:
        excluded_files.update(f.strip() for f in args.exclude_files.split(','))
    if args.exclude_extensions:
        excluded_extensions.update(f'.{e.strip().lstrip(".")}' for e in args.exclude_extensions.split(','))

    # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ---
    output_dir = Path(args.output_dir) if args.output_dir else start_path
    output_dir.mkdir(parents=True, exist_ok=True)
    output_file = output_dir / f'project_{start_path.name}_structure.md'

    # --- –°–±–æ—Ä –∏ –∑–∞–ø–∏—Å—å ---
    file_collector = DefaultFileCollector(verbose=args.verbose)
    project_tree, files_to_include = file_collector.collect(
        start_path,
        excluded_dirs,
        excluded_files,
        excluded_extensions,
        args.exclude_dotfiles
    )

    file_writer = MarkdownFileWriter()
    file_writer.write(output_file, project_tree, files_to_include, start_path)

    print(f'‚úÖ –ì–æ—Ç–æ–≤–æ! –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {output_file}')
    print(f'üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(files_to_include)}')


if __name__ == '__main__':
    main()
