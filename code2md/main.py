import argparse
import typing
from pathlib import Path

from code2md.file_collector import DefaultFileCollector
from code2md.file_writer import MarkdownFileWriter

if typing.TYPE_CHECKING:
    from code2md.interfaces import FileCollector, FileWriter


class ProjectStructureCollector:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ (–ü—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ - SRP)."""

    def __init__(self, file_collector: 'FileCollector', file_writer: 'FileWriter') -> None:
        self.file_collector = file_collector
        self.file_writer = file_writer

    def collect_and_save(
            self,
            start_path: Path,
            output_file: Path,
            excluded_dirs: set[str],
            excluded_files: set[str],
            excluded_extensions: set[str],
    ) -> None:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

        Args:
            start_path: –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            excluded_dirs: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            excluded_files: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            excluded_extensions: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        """
        project_tree, files_to_include = self.file_collector.collect(
            start_path, excluded_dirs, excluded_files, excluded_extensions
        )

        self.file_writer.write(output_file, project_tree, files_to_include, start_path)

        print(f'‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}')
        print(f'üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(files_to_include)}')


def parse_comma_separated_args(args_str: str) -> set[str]:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç—ã–º–∏."""
    if not args_str:
        return set()
    return {item.strip() for item in args_str.split(',') if item.strip()}


def get_default_config() -> tuple[set[str], set[str], set[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    excluded_dirs = {
        '.git', '.idea', '.vscode', '__pycache__', 'node_modules',
        'dist', '.env', '.venv', 'certs', 'build', 'egg-info',
        '.ruff_cache', '.pytest_cache'
    }

    excluded_files = {
        'uv.lock', 'package-lock.json', '.DS_Store'
    }

    excluded_extensions = {
        '.tgz', '.mp3', '.lock', '.log', '.DS_Store'
    }

    return excluded_dirs, excluded_files, excluded_extensions


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description='–°–±–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  code2md
  code2md --exclude-dirs ".git,.idea,build"
  code2md --exclude-files "README.md,config.ini" --exclude-extensions ".txt,.log"
  code2md --output-dir "docs" # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–ø–∫—É docs
  code2md --verbose
        """
    )

    parser.add_argument(
        '-d', '--exclude-dirs',
        help='–ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –ø–∞–ø–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ".git,.idea,node_modules"'
    )

    parser.add_argument(
        '-f', '--exclude-files',
        help='–ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): "README.md,config.ini"'
    )

    parser.add_argument(
        '-e', '--exclude-extensions',
        help='–ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ".log,.tmp,.bak"'
    )

    parser.add_argument(
        '-o', '--output-dir',
        help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∞—è)'
    )

    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='–í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞'
    )

    args = parser.parse_args()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    excluded_dirs, excluded_files, excluded_extensions = get_default_config()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if args.exclude_dirs:
        excluded_dirs.update(parse_comma_separated_args(args.exclude_dirs))

    if args.exclude_files:
        excluded_files.update(parse_comma_separated_args(args.exclude_files))

    if args.exclude_extensions:
        excluded_extensions.update(parse_comma_separated_args(args.exclude_extensions))

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤
    file_collector = DefaultFileCollector(verbose=args.verbose)
    file_writer = MarkdownFileWriter()
    collector = ProjectStructureCollector(file_collector, file_writer)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    start_path = Path.cwd()
    print(f'–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {start_path}')

    # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    output_filename_str = f'{start_path.name}_structure.md'

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    if args.output_dir:
        output_path = Path(args.output_dir)
        # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not output_path.is_absolute():
            output_path = start_path / output_path

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        output_path.mkdir(parents=True, exist_ok=True)

        final_output_file = output_path / output_filename_str
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        final_output_file = start_path / output_filename_str

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–æ–ø–∞–ª —Å–∞–º –≤ —Å–µ–±—è
    excluded_files.add(output_filename_str)

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±–æ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    collector.collect_and_save(
        start_path,
        final_output_file,
        excluded_dirs,
        excluded_files,
        excluded_extensions
    )


if __name__ == '__main__':
    main()
